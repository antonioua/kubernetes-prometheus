apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-rules
  namespace: monitoring
data:
  prometheus.rules.yaml: |
    groups:
    - name: downtime.alerts
      rules:
      # KubeControllerIsDown - hires when kubernetes controller is down during 1m
      - alert: KubeControllerIsDown
        expr: absent(up{job="kube-controller-manager-prometheus-discovery"} == 1)
        for: 1m
        labels:
          severity: critical
        annotations:
          description: There is no running K8S controller manager. Deployments and replication
            controllers are not making progress.
          runbook: https://coreos.com/tectonic/docs/latest/troubleshooting/controller-recovery.html#recovering-a-controller-manager
          summary: Controller manager is down

    - name: node.alerts
      rules:
      # NodeCpuHigh - hires when cpu usage of one of the node > 85% during 15m. Consider number of cpu cores here
      - alert: NodeCpuHigh
        ### we use "100 -" becasue we get the sum of idle processes that is about 95%, and then we need to get the amount of used cpu
        ### expr: 100 - (sum by (instance) (rate(node_cpu_seconds_total{job="node-exporter",mode="idle"}[1m])) * 100) > 85
        # per-second usage if we take its rate, then we convert it to percentage usage depending on number of cpu on each instance accordingly, group_left() - many-to-one reference
        expr: ( rate(container_cpu_system_seconds_total{id="/", image=""}[5m]) + rate(container_cpu_user_seconds_total{id="/", image=""}[5m]) ) * 100 / on (instance) group_left() machine_cpu_cores > 85
        for: 15m
        labels:
          severity: critical
        annotations:
          description: "High CPU usage detected"
          #description: "High CPU utilisation detected for instance {{ $labels.instance_id }} tagged as: {{ $labels.instance_name_tag }}, the utilisation is currently: {{ $value }}%"
          summary: Kubernetes CPU Usage Alert

    - name: container.alerts
      rules:
      # NonPodCpuHigh - hires when sum of cpu usages of the processes which are not kubernetes pods > 30% during 15m
      - alert: NonPodCpuHigh
        ###expr: sum by (instance) (rate(container_cpu_usage_seconds_total{container_name!="POD", id!~"/kubepods.*"}[1m]) * 100) > 30
        expr: ( sum by (instance) (rate(container_cpu_usage_seconds_total{id!~"/kubepods.*"}[5m])) + sum by (instance) (rate(container_cpu_user_seconds_total{id!~"/kubepods.*"}[5m])) ) *100  / on (instance) group_left() machine_cpu_cores > 30
        for: 15m
        labels:
          severity: critical
        annotations:
          description: "High CPU usage of non-pod processes"
          summary: CPU Usage Alert

      # PodMemoryHigh - hires when memory usage of one of the pods > 70% of the node memory where it is running
      - alert: PodMemoryHigh
        ###expr: (sum by (pod_name, instance) (container_memory_usage_bytes{container_name="POD", image!=""})) * 100 / 2985963520 > 70
        expr: (sum by (pod_name, instance) (container_memory_usage_bytes{container_name="POD", image!=""})) * 100 / on (instance) group_left() machine_memory_bytes > 70
        for: 1m
        labels:
          severity: warning
        annotations:
          description: "High Memory usage by POD"
          summary: High Memory Usage
